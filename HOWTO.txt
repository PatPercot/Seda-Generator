/*****************************************************************************************
 * 
 * Générateur de bordereaux de transfert guidé par le profil d'archivage
 *                         -----------------------
 * Département du Morbihan
 * Direction des systèmes d'information
 * Service Études
 * Patrick Percot
 * Mars 2015
 * 
 * Réutilisation du code autorisée dans l'intérêt des collectivités territoriales
 * 
 * ****************************************************************************************/

Informations sur la configuration du système de production de bordereaux de versements

La responsabilité de tous les dysfonctionnements et de toutes les inepties que vous pourrez trouver dans ce code et
dans ces documents revient à Patrick Percot, direction des systèmes d'information, service études du conseil départemental du Morbihan

J'ai glissé des (TODO) là où j'ai vu des améliorations à apporter au code


En résumé :
1) Configuration du serveur du SAE
2) Configuration de la base de données
3) Comment tester la conformité du profil d'archivage avec les contraintes imposées
4) Comment tester et débugger la production du bordereau
5) Générer un profil et produire des données métier

1) Configuration du serveur du SAE

Ça permet de savoir à qui on envoie le bordereau de transfert et le ZIP.
Idéalement, on devrait pouvoir spécifier plusieurs SAE et choisir celui à qui on veut faire l'envoi.
À faire plus tard... (TODO)

Ça se passe dans le fichier APP.config du projet SedaProfileGenerator.
L'utilisateur doit être créé sur le serveur de préproduction avec seulement des droits sur les web services
Attention, il faut d'abord se connecter une fois avec cet utilisateur afin de changer son mot de passe avant de supprimer ses droits.

  <appSettings>
    <!-- DEB : Transfert vers Asalaé -->
    <!-- Pas utilisé, ces informations sont demandées par l'appelant des web services -->
    <add key="BaseURI" value="https://pre-prodsae-dep56-e-megalis.navaho.fr" />
    <add key="User" value="web-service" />
    <add key="Pass" value="mot-de-passe-vachement-compliqué" />
    <add key="Mail" value ="patrick.percot@morbihan.fr"/>
    <!-- FIN : Transfert vers Asalaé -->

  </appSettings>


2) Configuration de la base de données

Vous devrez créer une base de données pour stocker les informations de configuration du SAE que vous devrez donc recopier.
Ces informations, idéalement, devraient être fournies par le SAE. À venir bientôt, on en discutera avec l'adullact qui
est d'accord sur le principe.
Ça sert aussi à stocker des choses qui ne sont pas dans le SAE mais que l'on doit avoir pour faire fonctionner tout ça.
C'est le préfixe des identifiants de transfert et l'identifiant de transfert mis à jour à chaque nouveau bordereau produit
La clé d'entrée, c'est l'accord de versement + le serveur auquel on doit envoyer le bordereau (cas d'un serveur mutualisé)

Ci-dessous le script Pour SqlServer
USE [BW_DEV]
GO

/****** Object:  Table [dbo].[SAE]    Script Date: 03/11/2015 13:03:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[SAE](
	[SAE_AccordVersement] [nvarchar](50) NOT NULL,
	[SAE_Serveur] [nvarchar](max) NOT NULL,
	[TransferIdPrefix] [nvarchar](50) NULL,
	[TransferIdValue] [nchar](10) NULL,
	[SAE_ProfilArchivage] [nvarchar](max) NULL,
	[TransferringAgencyId] [nvarchar](50) NULL,
	[TransferringAgencyName] [nvarchar](max) NULL,
	[TransferringAgencyDesc] [nvarchar](max) NULL,
	[ArchivalAgencyId] [nvarchar](50) NULL,
	[ArchivalAgencyName] [nvarchar](max) NULL,
	[ArchivalAgencyDesc] [nvarchar](max) NULL
) ON [PRIMARY]

GO


La configuration proprement dite après cette entrée en matière :

Ça se passe dans trois endroits et rétrospectivement, je me dis que ce n'était pas malin (TODO). On peut pas toujours être futé ;°)
En plus ce n'est pas paramétrable (TODO) ! On respire par le nez, là j'ai franchement pas été bon... ;-(


2-a) Le premier endroit, ce sont les fichiers de configuration 
	- App.config dans SedaSummaryGeneratorTester qu(il faut créer à partir de App.config.example
	- Web.config dans WsSoapSedaGeneratorAspWebApp qu(il faut créer à partir de Web.config.example

	Modifier dans la section appSettings la clé databaseConnexion pour configurer la chaîne de connexion à la base


2-b) Le second endroit, c'est dans le projet SedaProfileGenerator, le fichier SedaSummaryRngGenerator.cs dans la méthode prepareInformationsWithDatabase
     On y trouve la requête proprement dite pour aller chercher les données de paramétrage.

                        command.CommandText = "SELECT TransferIdPrefix, TransferIdValue, SAE_ProfilArchivage, "
                            + " TransferringAgencyId, TransferringAgencyName, TransferringAgencyDesc, ArchivalAgencyId, ArchivalAgencyName, ArchivalAgencyDesc " 
                            + " "
                            + " FROM SAE WHERE SAE_AccordVersement='" + accordVersement + "' and SAE_Serveur='" + baseURI + "'";

2-c) Le troisième endroit, c'est dans la même méthode qu ci-dessus.
     C'est la requête de mise à jour. Normalement on n'y touche pas... sauf si on crée une base de données avec un nom différent et des champs différents (TODO).

                        command.CommandText = "UPDATE SAE SET TransferIdValue='" + Id + "' WHERE SAE_AccordVersement='" + accordVersement + "' and SAE_Serveur='" + baseURI + "'";



3) Comment tester la conformité du profil d'archivage avec les contraintes imposées

3-a) Quelles contraintes ?

Un pré-requis : utiliser Agape pour écrire son profil d'archivage, il n'y a pas aujourd'hui d'autre option, donc pas de problèmes de ce côté.

La seule contrainte imposée à l’archiviste qui rédige le profil d’archivage est de prévoir la balise « ArchivalAgencyObjectIdentifier » 
avec un attribut « schemeID » contenant « espace/espace » dans chaque unité documentaire : 
	ArchivalAgencyObjectIdentifier schemeID="DOCLIST / PES". 
La partie de cette valeur d’attribut qui suit la séquence « espace/espace  » permet de trouver les documents qui seront référencés 
dans cette unité documentaire (ici tous les documents porteurs du tag PES). Quel tag ? On voit ça plus tard dans les données métier.
Tant que les balises optionnelles ne sont pas générées, l’archiviste doit rendre obligatoires celles qui sont essentielles.

3-b) Tester, puis corriger...

Rien n'est paramétrable, tout est en dur, mais étant donné l'usage prévu, c'est pas trop grave. Et hop, j'ai codé ça comme un sagouin,
mais je me rassure comme je peux ;°)


Ça se passe dans le projet RngProfileControllerTester et tout est dans Program.cs
Deux chaînes de carcatères pour spécifier où vous stockez vos traces et où se trouve le profil au format RNG à tester

            String traceFile = "D:/DEV_PPE/devel/RNG/trace-control.txt";
            String profileFile = @"\\cg56.fr\dfs2\BW\DEVT\ArcEspCo\DATA\CG56_PROFIL_PES_0001_v1_schema-duplication.rng";

Vérifier que l'arbre des unités documentaires produit ressemble à ce que l'on voulait décrire.
Ne pas oublier de corriger ce que le programme considère comme incorrect.

4) Comment tester et débugger la production du bordereau

Ça se passe dans le projet SedaSummaryGeneratorTester et tout est dans Program.cs
Il y a quatre paramètres à préciser.
- On spécifie l'accord de versement (dans la base de données, on aura créé un enregistrement qui donne
  des informations sur ceta ccord (profil, service versant, service d'archives, identifiant du versement).
- La liste des données métier
- Le nom du bordereau à créer
- Le nom du fichier de traces

            string accordVersement = "cg56_accord_marche_test_5";
            string fichier_test = @"d:\dev_ppe\tests\marches\liste_repetition_une_unite-1.txt";
            string fichier_bordereau = @"d:\dev_ppe\tests\work\bordereau-marche-une-unite-v1_0.xml";
            string tracefile = "d:/dev_ppe/traces/trace-marche-une-unite-v1_0.txt";


5) Générer un profil et produire des données métier

Là, il faut se lancer dans la lecture des deux fichiers HOWTO-profil-archivage et HOWTO-donnees-metier

